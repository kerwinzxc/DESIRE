#include "stdafx.h"
#include "Physics/Bullet/BulletPhysicsComponent.h"
#include "Physics/Bullet/BulletPhysics.h"
#include "Physics/Bullet/BulletVectormathExt.h"
#include "Core/math/AABB.h"

DESIRE_DISABLE_WARNINGS
#define BT_USE_SSE_IN_API
#include "btBulletDynamicsCommon.h"
#include "BulletCollision/CollisionDispatch/btInternalEdgeUtility.h"
DESIRE_ENABLE_WARNINGS

BulletPhysicsComponent::BulletPhysicsComponent(bool dynamic)
	: body(nullptr)
	, shape(nullptr)
	, motionState(nullptr)
	, triangleIndexVertexArrays(nullptr)
	, dynamic(dynamic)
{
	cmass[0] = cmass[1] = cmass[2] = 0.0f;

	int *indices = nullptr;
	float *vertices = nullptr;

	uint32_t numIndices = 0;
	uint32_t numVertices = 0;

	int stride = 3;

	btVector3 localInertia(0.0f, 0.0f, 0.0f);

	if(dynamic)
	{
		AABB aabb(Vector3(FLT_MAX), Vector3(-FLT_MAX));
		for(uint32_t i = 0; i < numVertices; i++)
		{
			aabb.AddPoint(Vector3(vertices[i * stride + 0], vertices[i * stride + 1], vertices[i * stride + 2]));
		}

		if(false)
		{
			shape = new btBoxShape(GetBtVector3(aabb.GetSize() * 0.5f));
		}
		else
		{
			const btVector3 cmassVec = GetBtVector3(aabb.GetCenter());
			cmass[0] = cmassVec.getX();
			cmass[1] = cmassVec.getY();
			cmass[2] = cmassVec.getZ();

			btConvexHullShape *convexHullShape = new btConvexHullShape();
			for(uint32_t i = 0; i < numIndices; i++)
			{
				btVector3 v(vertices[indices[i] * stride], vertices[indices[i] * stride + 1], vertices[indices[i] * stride + 2]);
				v -= cmassVec;
				convexHullShape->addPoint(v, false);
			}
			convexHullShape->recalcLocalAabb();

			shape = convexHullShape;
		}

		shape->calculateLocalInertia(10.0f, localInertia);
	}
	else
	{
		btIndexedMesh mesh;
		mesh.m_numTriangles = (int)numIndices / 3;
		mesh.m_triangleIndexBase = (uint8_t*)indices;
		mesh.m_triangleIndexStride = 3 * sizeof(int);
		mesh.m_numVertices = (int)numVertices;
		mesh.m_vertexBase = (uint8_t*)vertices;
		mesh.m_vertexStride = (int)(stride * sizeof(float));

		triangleIndexVertexArrays = new btTriangleIndexVertexArray();
		triangleIndexVertexArrays->addIndexedMesh(mesh);

		btBvhTriangleMeshShape *trimeshShape = new btBvhTriangleMeshShape(triangleIndexVertexArrays, true);
		btTriangleInfoMap *triangleInfoMap = new btTriangleInfoMap();
		btGenerateInternalEdgeInfo(trimeshShape, triangleInfoMap);

		shape = trimeshShape;
	}

	motionState = new btDefaultMotionState();
	btRigidBody::btRigidBodyConstructionInfo cInfo(0.0f, motionState, shape, localInertia);
	body = new btRigidBody(cInfo);
	body->setUserPointer(this);

	BulletPhysics *physics = static_cast<BulletPhysics*>(IPhysics::Get());
	physics->dynamicsWorld->addRigidBody(body, (1 << (int)collisionGroup), physics->GetCollisionMaskForGroup(collisionGroup));

	if(dynamic)
	{
		body->setFriction(10.0f);
		body->setActivationState(ISLAND_SLEEPING);
	}
	else
	{
		body->setFriction(0.1f);
		body->setCollisionFlags(body->getCollisionFlags() | btCollisionObject::CF_STATIC_OBJECT | btCollisionObject::CF_CUSTOM_MATERIAL_CALLBACK);
	}
}

BulletPhysicsComponent::~BulletPhysicsComponent()
{
	BulletPhysics *physics = static_cast<BulletPhysics*>(IPhysics::Get());
	physics->dynamicsWorld->removeRigidBody(body);
	delete body;

	if(!dynamic)
	{
		btBvhTriangleMeshShape *trimeshShape = static_cast<btBvhTriangleMeshShape*>(shape);
		btTriangleInfoMap *triangleInfoMap = trimeshShape->getTriangleInfoMap();
		delete triangleInfoMap;
		trimeshShape->setTriangleInfoMap(nullptr);
	}
	
	delete shape;
	delete motionState;
	delete triangleIndexVertexArrays;
}

void BulletPhysicsComponent::SetCollisionGroup(EPhysicsCollisionGroup i_collisionGroup)
{
	if(collisionGroup == i_collisionGroup)
	{
		return;
	}

	collisionGroup = i_collisionGroup;

	if(collisionGroup == EPhysicsCollisionGroup::NO_COLLISION)
	{
		body->forceActivationState(DISABLE_SIMULATION);
	}
	else if(body->getActivationState() == DISABLE_SIMULATION)
	{
		body->forceActivationState(ISLAND_SLEEPING);
	}

	BulletPhysics *physics = static_cast<BulletPhysics*>(IPhysics::Get());
	btBroadphaseProxy *handle = body->getBroadphaseHandle();
	handle->m_collisionFilterGroup = (1 << (int)collisionGroup);
	handle->m_collisionFilterMask = physics->GetCollisionMaskForGroup(collisionGroup);
}

void BulletPhysicsComponent::SetMass(float mass)
{
	if(body->isStaticOrKinematicObject() == false)
	{
		btVector3 localInertia;
		body->getCollisionShape()->calculateLocalInertia(mass, localInertia);
		body->setMassProps(mass, localInertia);
	}
}

float BulletPhysicsComponent::GetMass() const
{
	const float rv = body->getInvMass();
	return (rv != 0.0f) ? 1.0f / rv : 0.0f;
}

bool BulletPhysicsComponent::resolve()
{
	if(bodies == nullptr)
	{
		return false;
	}

	if(dynamic && bodies[0]->getActivationState() != ISLAND_SLEEPING)
	{
		float matrix[16];
		btTransform lt = bodies[0]->getCenterOfMassTransform();
		lt.setOrigin(lt.getOrigin() - btVector3(cmass[0], cmass[1], cmass[2]).rotate(lt.getRotation().getAxis(), lt.getRotation().getAngle()));
		lt.getOpenGLMatrix(matrix);

		Matrix4 m(matrix);
		ITransform *ttmp = object->getTransform();
		ttmp->setPositionWithRotation(m.getTranslation(), m.getUpper3x3());

		return true;
	}

	return false;
}

void BulletPhysicsComponent::Simulate(float)
{

}

void BulletPhysicsComponent::setMaterial(IPhysicsMaterial *material)
{
	for(uint8_t i = 0; i < nbodies; i++)
	{
//		bodies[i]->setFriction(b_material->friction);
//		bodies[i]->setRestitution(b_material->restitution);
	}
}

void BulletPhysicsComponent::addForce(const Vector3& force, const Vector3& pos)
{
	for(uint8_t i = 0; i < nbodies; i++)
	{
		bodies[i]->applyForce(btVector3(force.getX(), force.getY(), force.getZ()), btVector3(pos.getX(), pos.getY(), pos.getZ()));
	}
}

void BulletPhysicsComponent::addTorque(const Vector3& torque)
{
	for(uint8_t i = 0; i < nbodies; i++)
	{
		bodies[i]->applyTorque(btVector3(torque.getX(), torque.getY(), torque.getZ()));
	}
}

void BulletPhysicsComponent::setPosition(const Vector3& position)
{
	btVector3 pos(position.getX() + cmass[0], position.getY() + cmass[1], position.getZ() + cmass[2]);

	for(uint8_t i = 0; i < nbodies; i++)
	{
		btTransform t = bodies[i]->getWorldTransform();
		t.setOrigin(pos);

		bodies[i]->setWorldTransform(t);
		bodies[i]->setActivationState(ISLAND_SLEEPING);
	}

	ITransform *ttmp = object->getTransform();
	ttmp->setPosition(position);
}

void BulletPhysicsComponent::setRotation(const Matrix3& rotation)
{
	float m[16] = { 0 };
	Vector3 col = rotation.getCol0();
	m[0] = col.getX(); m[1] = col.getY(); m[2] = col.getZ();
	col = rotation.getCol1();
	m[4] = col.getX(); m[5] = col.getY(); m[6] = col.getZ();
	col = rotation.getCol2();
	m[8] = col.getX(); m[9] = col.getY(); m[10] = col.getZ();
	m[15] = 1.0f;

	for(uint8_t i = 0; i < nbodies; i++)
	{
		btTransform t = bodies[i]->getWorldTransform();
		const btVector3 origin = t.getOrigin();
		m[12] = origin.getX(); m[13] = origin.getY(); m[14] = origin.getZ();

		t.setFromOpenGLMatrix(m);

		bodies[i]->setWorldTransform(t);
		bodies[i]->setActivationState(ISLAND_SLEEPING);
	}

	ITransform *ttmp = object->getTransform();
	ttmp->setRotation(rotation);
}

